import 'server-only';

import { relations } from 'drizzle-orm';
import {
	boolean,
	pgEnum,
	pgTable,
	text,
	timestamp,
	varchar,
	bigint
} from 'drizzle-orm/pg-core';

// Enums
export const socialPlatformEnum = pgEnum('social_platform', [
	'twitter',
	'discord',
	'telegram',
	'website'
]);

// Better Auth tables (exactly as generated by CLI)
export const user = pgTable("user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified")
    .$defaultFn(() => false)
    .notNull(),
  image: text("image"),
  createdAt: timestamp("created_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  updatedAt: timestamp("updated_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
});

export const session = pgTable("session", {
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
});

export const account = pgTable("account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  expiresAt: timestamp("expires_at"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

export const verification = pgTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").$defaultFn(
    () => /* @__PURE__ */ new Date(),
  ),
  updatedAt: timestamp("updated_at").$defaultFn(
    () => /* @__PURE__ */ new Date(),
  ),
});

// Custom application tables (extending Better Auth)
export const userPages = pgTable('user_page', {
	id: text('id').primaryKey(),
	userId: text('user_id')
		.references(() => user.id, { onDelete: 'cascade' })
		.notNull(),
	handle: varchar('handle', { length: 50 }).notNull().unique(),
	displayName: text('display_name').notNull(),
	shortDescription: varchar('short_description', { length: 300 }),
	longDescription: text('long_description'),
	kaspaAddress: varchar('kaspa_address', { length: 255 }).notNull(),
	profileImage: text('profile_image'),
	backgroundImage: text('background_image'),
	backgroundColor: varchar('background_color', { length: 7 }).default('#ffffff'),
	foregroundColor: varchar('foreground_color', { length: 7 }).default('#000000'),
	isActive: boolean('is_active').default(true).notNull(),
	viewCount: bigint('view_count', { mode: 'number' }).default(0),
	createdAt: timestamp('created_at').$defaultFn(() => new Date()).notNull(),
	updatedAt: timestamp('updated_at').$defaultFn(() => new Date()).notNull()
});

export const socials = pgTable('social', {
	id: text('id').primaryKey(),
	userId: text('user_id')
		.references(() => user.id, { onDelete: 'cascade' })
		.notNull(),
	platform: socialPlatformEnum('platform').notNull(),
	url: text('url').notNull(),
	username: varchar('username', { length: 100 }),
	isVisible: boolean('is_visible').default(true).notNull(),
	createdAt: timestamp('created_at').$defaultFn(() => new Date()).notNull(),
	updatedAt: timestamp('updated_at').$defaultFn(() => new Date()).notNull()
});

// Legacy aliases for compatibility (map to Better Auth tables)
export const users = user;
export const sessions = session;
export const accounts = account;

// Relations
export const userRelations = relations(user, ({ one, many }) => ({
	userPage: one(userPages, {
		fields: [user.id],
		references: [userPages.userId]
	}),
	socials: many(socials),
	sessions: many(sessions),
	accounts: many(accounts)
}));

export const userPagesRelations = relations(userPages, ({ one }) => ({
	user: one(user, {
		fields: [userPages.userId],
		references: [user.id]
	})
}));

export const socialsRelations = relations(socials, ({ one }) => ({
	user: one(user, {
		fields: [socials.userId],
		references: [user.id]
	})
}));

export const sessionRelations = relations(session, ({ one }) => ({
	user: one(user, {
		fields: [session.userId],
		references: [user.id]
	})
}));

export const accountRelations = relations(account, ({ one }) => ({
	user: one(user, {
		fields: [account.userId],
		references: [user.id]
	})
}));

// Legacy relation aliases
export const usersRelations = userRelations;
export const sessionsRelations = sessionRelations;
export const accountsRelations = accountRelations;

// Type exports
export type User = typeof user.$inferSelect;
export type NewUser = typeof user.$inferInsert;
export type UserPage = typeof userPages.$inferSelect;
export type NewUserPage = typeof userPages.$inferInsert;
export type Social = typeof socials.$inferSelect;
export type NewSocial = typeof socials.$inferInsert;
export type Session = typeof session.$inferSelect;
export type Account = typeof account.$inferSelect; 